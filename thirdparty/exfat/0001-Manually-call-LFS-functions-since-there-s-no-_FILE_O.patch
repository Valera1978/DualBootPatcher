From 713db0124ce5ab51878e795c20f8955d2c5ba7f3 Mon Sep 17 00:00:00 2001
From: Xiao-Long Chen <chenxiaolong@cxl.epac.to>
Date: Sun, 3 Jan 2016 02:49:00 -0500
Subject: [PATCH 1/3] Manually call LFS functions since there's no
 _FILE_OFFSET_BITS support

---
 dump/main.c        |  8 ++++----
 fuse/main.c        |  8 ++++----
 libexfat/cluster.c | 18 +++++++++---------
 libexfat/exfat.h   | 24 ++++++++++++------------
 libexfat/io.c      | 24 ++++++++++++------------
 libexfat/mount.c   |  2 +-
 libexfat/node.c    | 34 +++++++++++++++++-----------------
 libexfat/utils.c   |  4 ++--
 mkfs/cbm.c         |  4 ++--
 mkfs/fat.c         |  6 +++---
 mkfs/main.c        |  8 ++++----
 mkfs/mkexfat.c     | 24 ++++++++++++------------
 mkfs/mkexfat.h     | 10 +++++-----
 mkfs/rootdir.c     |  4 ++--
 mkfs/uct.c         |  4 ++--
 mkfs/vbr.c         |  6 +++---
 16 files changed, 94 insertions(+), 94 deletions(-)

diff --git a/dump/main.c b/dump/main.c
index 420a951..9e23ac4 100644
--- a/dump/main.c
+++ b/dump/main.c
@@ -106,7 +106,7 @@ static int dump_sb(const char* spec)
 
 static void dump_sectors(struct exfat* ef)
 {
-	off_t a = 0, b = 0;
+	off64_t a = 0, b = 0;
 
 	printf("Used sectors ");
 	while (exfat_find_used_sectors(ef, &a, &b) == 0)
@@ -147,8 +147,8 @@ static int dump_file_fragments(const char* spec, const char* path)
 	cluster_t cluster;
 	cluster_t next_cluster;
 	cluster_t fragment_start_cluster;
-	off_t remainder;
-	off_t fragment_size = 0;
+	off64_t remainder;
+	off64_t fragment_size = 0;
 	int rc = 0;
 
 	if (exfat_mount(&ef, spec, "ro") != 0)
@@ -166,7 +166,7 @@ static int dump_file_fragments(const char* spec, const char* path)
 	remainder = node->size;
 	while (remainder > 0)
 	{
-		off_t lsize;
+		off64_t lsize;
 
 		if (CLUSTER_INVALID(cluster))
 		{
diff --git a/fuse/main.c b/fuse/main.c
index 3c91b12..b66e876 100644
--- a/fuse/main.c
+++ b/fuse/main.c
@@ -74,7 +74,7 @@ static int fuse_exfat_getattr(const char* path, struct stat* stbuf)
 	return 0;
 }
 
-static int fuse_exfat_truncate(const char* path, off_t size)
+static int fuse_exfat_truncate(const char* path, off64_t size)
 {
 	struct exfat_node* node;
 	int rc;
@@ -98,7 +98,7 @@ static int fuse_exfat_truncate(const char* path, off_t size)
 }
 
 static int fuse_exfat_readdir(const char* path, void* buffer,
-		fuse_fill_dir_t filler, off_t offset, struct fuse_file_info* fi)
+		fuse_fill_dir_t filler, off64_t offset, struct fuse_file_info* fi)
 {
 	struct exfat_node* parent;
 	struct exfat_node* node;
@@ -216,14 +216,14 @@ static int fuse_exfat_fsync(const char* path, int datasync,
 }
 
 static int fuse_exfat_read(const char* path, char* buffer, size_t size,
-		off_t offset, struct fuse_file_info* fi)
+		off64_t offset, struct fuse_file_info* fi)
 {
 	exfat_debug("[%s] %s (%zu bytes)", __func__, path, size);
 	return exfat_generic_pread(&ef, get_node(fi), buffer, size, offset);
 }
 
 static int fuse_exfat_write(const char* path, const char* buffer, size_t size,
-		off_t offset, struct fuse_file_info* fi)
+		off64_t offset, struct fuse_file_info* fi)
 {
 	exfat_debug("[%s] %s (%zu bytes)", __func__, path, size);
 	return exfat_generic_pwrite(&ef, get_node(fi), buffer, size, offset);
diff --git a/libexfat/cluster.c b/libexfat/cluster.c
index 1d39233..00ab643 100644
--- a/libexfat/cluster.c
+++ b/libexfat/cluster.c
@@ -28,7 +28,7 @@
 /*
  * Sector to absolute offset.
  */
-static off_t s2o(const struct exfat* ef, off_t sector)
+static off64_t s2o(const struct exfat* ef, off64_t sector)
 {
 	return sector << ef->sb->sector_bits;
 }
@@ -36,18 +36,18 @@ static off_t s2o(const struct exfat* ef, off_t sector)
 /*
  * Cluster to sector.
  */
-static off_t c2s(const struct exfat* ef, cluster_t cluster)
+static off64_t c2s(const struct exfat* ef, cluster_t cluster)
 {
 	if (cluster < EXFAT_FIRST_DATA_CLUSTER)
 		exfat_bug("invalid cluster number %u", cluster);
 	return le32_to_cpu(ef->sb->cluster_sector_start) +
-		((off_t) (cluster - EXFAT_FIRST_DATA_CLUSTER) << ef->sb->spc_bits);
+		((off64_t) (cluster - EXFAT_FIRST_DATA_CLUSTER) << ef->sb->spc_bits);
 }
 
 /*
  * Cluster to absolute offset.
  */
-off_t exfat_c2o(const struct exfat* ef, cluster_t cluster)
+off64_t exfat_c2o(const struct exfat* ef, cluster_t cluster)
 {
 	return s2o(ef, c2s(ef, cluster));
 }
@@ -55,7 +55,7 @@ off_t exfat_c2o(const struct exfat* ef, cluster_t cluster)
 /*
  * Sector to cluster.
  */
-static cluster_t s2c(const struct exfat* ef, off_t sector)
+static cluster_t s2c(const struct exfat* ef, off64_t sector)
 {
 	return ((sector - le32_to_cpu(ef->sb->cluster_sector_start)) >>
 			ef->sb->spc_bits) + EXFAT_FIRST_DATA_CLUSTER;
@@ -74,7 +74,7 @@ cluster_t exfat_next_cluster(const struct exfat* ef,
 		const struct exfat_node* node, cluster_t cluster)
 {
 	le32_t next;
-	off_t fat_offset;
+	off64_t fat_offset;
 
 	if (cluster < EXFAT_FIRST_DATA_CLUSTER)
 		exfat_bug("bad cluster 0x%x", cluster);
@@ -174,7 +174,7 @@ int exfat_flush(struct exfat* ef)
 static bool set_next_cluster(const struct exfat* ef, bool contiguous,
 		cluster_t current, cluster_t next)
 {
-	off_t fat_offset;
+	off64_t fat_offset;
 	le32_t next_le32;
 
 	if (contiguous)
@@ -359,7 +359,7 @@ static int shrink_file(struct exfat* ef, struct exfat_node* node,
 	return 0;
 }
 
-static bool erase_raw(struct exfat* ef, size_t size, off_t offset)
+static bool erase_raw(struct exfat* ef, size_t size, off64_t offset)
 {
 	if (exfat_pwrite(ef->dev, ef->zero_cluster, size, offset) < 0)
 	{
@@ -472,7 +472,7 @@ static int find_used_clusters(const struct exfat* ef,
 	return 0;
 }
 
-int exfat_find_used_sectors(const struct exfat* ef, off_t* a, off_t* b)
+int exfat_find_used_sectors(const struct exfat* ef, off64_t* a, off64_t* b)
 {
 	cluster_t ca, cb;
 
diff --git a/libexfat/exfat.h b/libexfat/exfat.h
index 21b760e..f86a9af 100644
--- a/libexfat/exfat.h
+++ b/libexfat/exfat.h
@@ -61,9 +61,9 @@
 #define BMAP_CLR(bitmap, index) \
 	((bitmap)[BMAP_BLOCK(index)] &= ~BMAP_MASK(index))
 
-/* The size of off_t type must be 64 bits. File systems larger than 2 GB will
-   be corrupted with 32-bit off_t. */
-STATIC_ASSERT(sizeof(off_t) == 8);
+/* The size of off64_t type must be 64 bits. File systems larger than 2 GB will
+   be corrupted with 32-bit off64_t. */
+STATIC_ASSERT(sizeof(off64_t) == 8);
 
 struct exfat_node
 {
@@ -75,7 +75,7 @@ struct exfat_node
 	int references;
 	uint32_t fptr_index;
 	cluster_t fptr_cluster;
-	off_t entry_offset;
+	off64_t entry_offset;
 	cluster_t start_cluster;
 	uint16_t attrib;
 	uint8_t continuations;
@@ -145,18 +145,18 @@ struct exfat_dev* exfat_open(const char* spec, enum exfat_mode mode);
 int exfat_close(struct exfat_dev* dev);
 int exfat_fsync(struct exfat_dev* dev);
 enum exfat_mode exfat_get_mode(const struct exfat_dev* dev);
-off_t exfat_get_size(const struct exfat_dev* dev);
-off_t exfat_seek(struct exfat_dev* dev, off_t offset, int whence);
+off64_t exfat_get_size(const struct exfat_dev* dev);
+off64_t exfat_seek(struct exfat_dev* dev, off64_t offset, int whence);
 ssize_t exfat_read(struct exfat_dev* dev, void* buffer, size_t size);
 ssize_t exfat_write(struct exfat_dev* dev, const void* buffer, size_t size);
 ssize_t exfat_pread(struct exfat_dev* dev, void* buffer, size_t size,
-		off_t offset);
+		off64_t offset);
 ssize_t exfat_pwrite(struct exfat_dev* dev, const void* buffer, size_t size,
-		off_t offset);
+		off64_t offset);
 ssize_t exfat_generic_pread(const struct exfat* ef, struct exfat_node* node,
-		void* buffer, size_t size, off_t offset);
+		void* buffer, size_t size, off64_t offset);
 ssize_t exfat_generic_pwrite(struct exfat* ef, struct exfat_node* node,
-		const void* buffer, size_t size, off_t offset);
+		const void* buffer, size_t size, off64_t offset);
 
 int exfat_opendir(struct exfat* ef, struct exfat_node* dir,
 		struct exfat_iterator* it);
@@ -167,7 +167,7 @@ int exfat_lookup(struct exfat* ef, struct exfat_node** node,
 int exfat_split(struct exfat* ef, struct exfat_node** parent,
 		struct exfat_node** node, le16_t* name, const char* path);
 
-off_t exfat_c2o(const struct exfat* ef, cluster_t cluster);
+off64_t exfat_c2o(const struct exfat* ef, cluster_t cluster);
 cluster_t exfat_next_cluster(const struct exfat* ef,
 		const struct exfat_node* node, cluster_t cluster);
 cluster_t exfat_advance_cluster(const struct exfat* ef,
@@ -177,7 +177,7 @@ int exfat_flush(struct exfat* ef);
 int exfat_truncate(struct exfat* ef, struct exfat_node* node, uint64_t size,
 		bool erase);
 uint32_t exfat_count_free_clusters(const struct exfat* ef);
-int exfat_find_used_sectors(const struct exfat* ef, off_t* a, off_t* b);
+int exfat_find_used_sectors(const struct exfat* ef, off64_t* a, off64_t* b);
 
 void exfat_stat(const struct exfat* ef, const struct exfat_node* node,
 		struct stat* stbuf);
diff --git a/libexfat/io.c b/libexfat/io.c
index 514383c..664e77a 100644
--- a/libexfat/io.c
+++ b/libexfat/io.c
@@ -42,7 +42,7 @@ struct exfat_dev
 {
 	int fd;
 	enum exfat_mode mode;
-	off_t size; /* in bytes */
+	off64_t size; /* in bytes */
 };
 
 static int open_ro(const char* spec)
@@ -244,14 +244,14 @@ enum exfat_mode exfat_get_mode(const struct exfat_dev* dev)
 	return dev->mode;
 }
 
-off_t exfat_get_size(const struct exfat_dev* dev)
+off64_t exfat_get_size(const struct exfat_dev* dev)
 {
 	return dev->size;
 }
 
-off_t exfat_seek(struct exfat_dev* dev, off_t offset, int whence)
+off64_t exfat_seek(struct exfat_dev* dev, off64_t offset, int whence)
 {
-	return lseek(dev->fd, offset, whence);
+	return lseek64(dev->fd, offset, whence);
 }
 
 ssize_t exfat_read(struct exfat_dev* dev, void* buffer, size_t size)
@@ -265,23 +265,23 @@ ssize_t exfat_write(struct exfat_dev* dev, const void* buffer, size_t size)
 }
 
 ssize_t exfat_pread(struct exfat_dev* dev, void* buffer, size_t size,
-		off_t offset)
+		off64_t offset)
 {
-	return pread(dev->fd, buffer, size, offset);
+	return pread64(dev->fd, buffer, size, offset);
 }
 
 ssize_t exfat_pwrite(struct exfat_dev* dev, const void* buffer, size_t size,
-		off_t offset)
+		off64_t offset)
 {
-	return pwrite(dev->fd, buffer, size, offset);
+	return pwrite64(dev->fd, buffer, size, offset);
 }
 
 ssize_t exfat_generic_pread(const struct exfat* ef, struct exfat_node* node,
-		void* buffer, size_t size, off_t offset)
+		void* buffer, size_t size, off64_t offset)
 {
 	cluster_t cluster;
 	char* bufp = buffer;
-	off_t lsize, loffset, remainder;
+	off64_t lsize, loffset, remainder;
 
 	if (offset >= node->size)
 		return 0;
@@ -322,12 +322,12 @@ ssize_t exfat_generic_pread(const struct exfat* ef, struct exfat_node* node,
 }
 
 ssize_t exfat_generic_pwrite(struct exfat* ef, struct exfat_node* node,
-		const void* buffer, size_t size, off_t offset)
+		const void* buffer, size_t size, off64_t offset)
 {
 	int rc;
 	cluster_t cluster;
 	const char* bufp = buffer;
-	off_t lsize, loffset, remainder;
+	off64_t lsize, loffset, remainder;
 
  	if (offset > node->size)
 	{
diff --git a/libexfat/mount.c b/libexfat/mount.c
index f907f29..5407caa 100644
--- a/libexfat/mount.c
+++ b/libexfat/mount.c
@@ -106,7 +106,7 @@ static void parse_options(struct exfat* ef, const char* options)
 }
 
 static bool verify_vbr_checksum(struct exfat_dev* dev, void* sector,
-		off_t sector_size)
+		off64_t sector_size)
 {
 	uint32_t vbr_checksum;
 	int i;
diff --git a/libexfat/node.c b/libexfat/node.c
index a3f00af..1c9f6d4 100644
--- a/libexfat/node.c
+++ b/libexfat/node.c
@@ -78,7 +78,7 @@ int exfat_cleanup_node(struct exfat* ef, struct exfat_node* node)
 }
 
 static int read_entries(struct exfat* ef, struct exfat_node* dir,
-		struct exfat_entry* entries, int n, off_t offset)
+		struct exfat_entry* entries, int n, off64_t offset)
 {
 	ssize_t size;
 
@@ -99,7 +99,7 @@ static int read_entries(struct exfat* ef, struct exfat_node* dir,
 }
 
 static int write_entries(struct exfat* ef, struct exfat_node* dir,
-		const struct exfat_entry* entries, int n, off_t offset)
+		const struct exfat_entry* entries, int n, off64_t offset)
 {
 	ssize_t size;
 
@@ -322,7 +322,7 @@ static int parse_file_entries(struct exfat* ef, struct exfat_node* parent,
 }
 
 static int parse_file_entry(struct exfat* ef, struct exfat_node* parent,
-		struct exfat_node** node, off_t* offset, int n)
+		struct exfat_node** node, off64_t* offset, int n)
 {
 	struct exfat_entry entries[n];
 	int rc;
@@ -373,7 +373,7 @@ static void decompress_upcase(uint16_t* output, const le16_t* source,
  * structure.
  */
 static int readdir(struct exfat* ef, struct exfat_node* parent,
-		struct exfat_node** node, off_t* offset)
+		struct exfat_node** node, off64_t* offset)
 {
 	int rc;
 	struct exfat_entry entry;
@@ -515,7 +515,7 @@ static int readdir(struct exfat* ef, struct exfat_node* parent,
 
 int exfat_cache_directory(struct exfat* ef, struct exfat_node* dir)
 {
-	off_t offset = 0;
+	off64_t offset = 0;
 	int rc;
 	struct exfat_node* node;
 	struct exfat_node* current = NULL;
@@ -655,7 +655,7 @@ int exfat_flush_node(struct exfat* ef, struct exfat_node* node)
 }
 
 static int erase_entries(struct exfat* ef, struct exfat_node* dir, int n,
-		off_t offset)
+		off64_t offset)
 {
 	struct exfat_entry entries[n];
 	int rc;
@@ -687,7 +687,7 @@ static int erase_node(struct exfat* ef, struct exfat_node* node)
 }
 
 static int shrink_directory(struct exfat* ef, struct exfat_node* dir,
-		off_t deleted_offset)
+		off64_t deleted_offset)
 {
 	const struct exfat_node* node;
 	const struct exfat_node* last_node;
@@ -734,7 +734,7 @@ static int shrink_directory(struct exfat* ef, struct exfat_node* dir,
 static int delete(struct exfat* ef, struct exfat_node* node)
 {
 	struct exfat_node* parent = node->parent;
-	off_t deleted_offset = node->entry_offset;
+	off64_t deleted_offset = node->entry_offset;
 	int rc;
 
 	exfat_get_node(parent);
@@ -781,7 +781,7 @@ int exfat_rmdir(struct exfat* ef, struct exfat_node* node)
 	return delete(ef, node);
 }
 
-static int check_slot(struct exfat* ef, struct exfat_node* dir, off_t offset,
+static int check_slot(struct exfat* ef, struct exfat_node* dir, off64_t offset,
 		int n)
 {
 	struct exfat_entry entries[n];
@@ -804,7 +804,7 @@ static int check_slot(struct exfat* ef, struct exfat_node* dir, off_t offset,
 }
 
 static int find_slot(struct exfat* ef, struct exfat_node* dir,
-		off_t* offset, int n)
+		off64_t* offset, int n)
 {
 	bitmap_t* dmap;
 	struct exfat_node* p;
@@ -833,7 +833,7 @@ static int find_slot(struct exfat* ef, struct exfat_node* dir,
 		if (BMAP_GET(dmap, i) == 0)
 		{
 			if (contiguous++ == 0)
-				*offset = (off_t) i * sizeof(struct exfat_entry);
+				*offset = (off64_t) i * sizeof(struct exfat_entry);
 			if (contiguous == n)
 				/* suitable slot is found, check that it's not occupied */
 				switch (check_slot(ef, dir, *offset, n))
@@ -865,7 +865,7 @@ static int find_slot(struct exfat* ef, struct exfat_node* dir,
 }
 
 static int commit_entry(struct exfat* ef, struct exfat_node* dir,
-		const le16_t* name, cluster_t cluster, off_t offset, uint16_t attrib)
+		const le16_t* name, cluster_t cluster, off64_t offset, uint16_t attrib)
 {
 	struct exfat_node* node;
 	const size_t name_length = utf16_length(name);
@@ -926,7 +926,7 @@ static int create(struct exfat* ef, const char* path, uint16_t attrib)
 	struct exfat_node* dir;
 	struct exfat_node* existing;
 	cluster_t cluster = EXFAT_CLUSTER_BAD;
-	off_t offset = -1;
+	off64_t offset = -1;
 	le16_t name[EXFAT_NAME_MAX + 1];
 	int rc;
 
@@ -996,7 +996,7 @@ int exfat_mkdir(struct exfat* ef, const char* path)
 
 static int rename_entry(struct exfat* ef, struct exfat_node* dir,
 		struct exfat_node* node, const le16_t* name, cluster_t new_cluster,
-		off_t new_offset)
+		off64_t new_offset)
 {
 	const size_t name_length = utf16_length(name);
 	const int name_entries = DIV_ROUND_UP(name_length, EXFAT_ENAME_MAX);
@@ -1049,7 +1049,7 @@ int exfat_rename(struct exfat* ef, const char* old_path, const char* new_path)
 	struct exfat_node* existing;
 	struct exfat_node* dir;
 	cluster_t cluster = EXFAT_CLUSTER_BAD;
-	off_t offset = -1;
+	off64_t offset = -1;
 	le16_t name[EXFAT_NAME_MAX + 1];
 	int rc;
 
@@ -1167,7 +1167,7 @@ const char* exfat_get_label(struct exfat* ef)
 	return ef->label;
 }
 
-static int find_label(struct exfat* ef, off_t* offset)
+static int find_label(struct exfat* ef, off64_t* offset)
 {
 	struct exfat_entry entry;
 	int rc;
@@ -1187,7 +1187,7 @@ int exfat_set_label(struct exfat* ef, const char* label)
 {
 	le16_t label_utf16[EXFAT_ENAME_MAX + 1];
 	int rc;
-	off_t offset;
+	off64_t offset;
 	struct exfat_entry_label entry;
 
 	memset(label_utf16, 0, sizeof(label_utf16));
diff --git a/libexfat/utils.c b/libexfat/utils.c
index c080d4c..6ef9bc8 100644
--- a/libexfat/utils.c
+++ b/libexfat/utils.c
@@ -162,8 +162,8 @@ void exfat_print_info(const struct exfat_super_block* sb,
 		uint32_t free_clusters)
 {
 	struct exfat_human_bytes hb;
-	off_t total_space = le64_to_cpu(sb->sector_count) * SECTOR_SIZE(*sb);
-	off_t avail_space = (off_t) free_clusters * CLUSTER_SIZE(*sb);
+	off64_t total_space = le64_to_cpu(sb->sector_count) * SECTOR_SIZE(*sb);
+	off64_t avail_space = (off64_t) free_clusters * CLUSTER_SIZE(*sb);
 
 	printf("File system version           %hhu.%hhu\n",
 			sb->version.major, sb->version.minor);
diff --git a/mkfs/cbm.c b/mkfs/cbm.c
index fb854e7..793d4ce 100644
--- a/mkfs/cbm.c
+++ b/mkfs/cbm.c
@@ -27,12 +27,12 @@
 #include <limits.h>
 #include <string.h>
 
-static off_t cbm_alignment(void)
+static off64_t cbm_alignment(void)
 {
 	return get_cluster_size();
 }
 
-static off_t cbm_size(void)
+static off64_t cbm_size(void)
 {
 	return DIV_ROUND_UP(
 			(get_volume_size() - get_position(&cbm)) / get_cluster_size(),
diff --git a/mkfs/fat.c b/mkfs/fat.c
index be3a6c3..776d26f 100644
--- a/mkfs/fat.c
+++ b/mkfs/fat.c
@@ -26,12 +26,12 @@
 #include "rootdir.h"
 #include <unistd.h>
 
-static off_t fat_alignment(void)
+static off64_t fat_alignment(void)
 {
-	return (off_t) 128 * get_sector_size();
+	return (off64_t) 128 * get_sector_size();
 }
 
-static off_t fat_size(void)
+static off64_t fat_size(void)
 {
 	return get_volume_size() / get_cluster_size() * sizeof(cluster_t);
 }
diff --git a/mkfs/main.c b/mkfs/main.c
index 02ac9c7..f5ed3cc 100644
--- a/mkfs/main.c
+++ b/mkfs/main.c
@@ -51,7 +51,7 @@ static struct
 {
 	int sector_bits;
 	int spc_bits;
-	off_t volume_size;
+	off64_t volume_size;
 	le16_t volume_label[EXFAT_ENAME_MAX + 1];
 	uint32_t volume_serial;
 	uint64_t first_sector;
@@ -68,7 +68,7 @@ int get_spc_bits(void)
 	return param.spc_bits;
 }
 
-off_t get_volume_size(void)
+off64_t get_volume_size(void)
 {
 	return param.volume_size;
 }
@@ -98,13 +98,13 @@ int get_cluster_size(void)
 	return get_sector_size() << get_spc_bits();
 }
 
-static int setup_spc_bits(int sector_bits, int user_defined, off_t volume_size)
+static int setup_spc_bits(int sector_bits, int user_defined, off64_t volume_size)
 {
 	int i;
 
 	if (user_defined != -1)
 	{
-		off_t cluster_size = 1 << sector_bits << user_defined;
+		off64_t cluster_size = 1 << sector_bits << user_defined;
 		if (volume_size / cluster_size > EXFAT_LAST_DATA_CLUSTER)
 		{
 			struct exfat_human_bytes chb, vhb;
diff --git a/mkfs/mkexfat.c b/mkfs/mkexfat.c
index 801f367..5c4638c 100644
--- a/mkfs/mkexfat.c
+++ b/mkfs/mkexfat.c
@@ -27,10 +27,10 @@
 #include <stdio.h>
 #include <string.h>
 
-static int check_size(off_t volume_size)
+static int check_size(off64_t volume_size)
 {
 	const struct fs_object** pp;
-	off_t position = 0;
+	off64_t position = 0;
 
 	for (pp = objects; *pp; pp++)
 	{
@@ -52,12 +52,12 @@ static int check_size(off_t volume_size)
 }
 
 static int erase_object(struct exfat_dev* dev, const void* block,
-		size_t block_size, off_t start, off_t size)
+		size_t block_size, off64_t start, off64_t size)
 {
-	const off_t block_count = DIV_ROUND_UP(size, block_size);
-	off_t i;
+	const off64_t block_count = DIV_ROUND_UP(size, block_size);
+	off64_t i;
 
-	if (exfat_seek(dev, start, SEEK_SET) == (off_t) -1)
+	if (exfat_seek(dev, start, SEEK_SET) == (off64_t) -1)
 	{
 		exfat_error("seek to 0x%"PRIx64" failed", start);
 		return 1;
@@ -77,7 +77,7 @@ static int erase_object(struct exfat_dev* dev, const void* block,
 static int erase(struct exfat_dev* dev)
 {
 	const struct fs_object** pp;
-	off_t position = 0;
+	off64_t position = 0;
 	const size_t block_size = 1024 * 1024;
 	void* block = malloc(block_size);
 
@@ -107,12 +107,12 @@ static int erase(struct exfat_dev* dev)
 static int create(struct exfat_dev* dev)
 {
 	const struct fs_object** pp;
-	off_t position = 0;
+	off64_t position = 0;
 
 	for (pp = objects; *pp; pp++)
 	{
 		position = ROUND_UP(position, (*pp)->get_alignment());
-		if (exfat_seek(dev, position, SEEK_SET) == (off_t) -1)
+		if (exfat_seek(dev, position, SEEK_SET) == (off64_t) -1)
 		{
 			exfat_error("seek to 0x%"PRIx64" failed", position);
 			return 1;
@@ -124,7 +124,7 @@ static int create(struct exfat_dev* dev)
 	return 0;
 }
 
-int mkfs(struct exfat_dev* dev, off_t volume_size)
+int mkfs(struct exfat_dev* dev, off64_t volume_size)
 {
 	if (check_size(volume_size) != 0)
 		return 1;
@@ -146,10 +146,10 @@ int mkfs(struct exfat_dev* dev, off_t volume_size)
 	return 0;
 }
 
-off_t get_position(const struct fs_object* object)
+off64_t get_position(const struct fs_object* object)
 {
 	const struct fs_object** pp;
-	off_t position = 0;
+	off64_t position = 0;
 
 	for (pp = objects; *pp; pp++)
 	{
diff --git a/mkfs/mkexfat.h b/mkfs/mkexfat.h
index e8e0a44..cedcd50 100644
--- a/mkfs/mkexfat.h
+++ b/mkfs/mkexfat.h
@@ -27,8 +27,8 @@
 
 struct fs_object
 {
-	off_t (*get_alignment)(void);
-	off_t (*get_size)(void);
+	off64_t (*get_alignment)(void);
+	off64_t (*get_size)(void);
 	int (*write)(struct exfat_dev* dev);
 };
 
@@ -36,14 +36,14 @@ extern const struct fs_object* objects[];
 
 int get_sector_bits(void);
 int get_spc_bits(void);
-off_t get_volume_size(void);
+off64_t get_volume_size(void);
 const le16_t* get_volume_label(void);
 uint32_t get_volume_serial(void);
 uint64_t get_first_sector(void);
 int get_sector_size(void);
 int get_cluster_size(void);
 
-int mkfs(struct exfat_dev* dev, off_t volume_size);
-off_t get_position(const struct fs_object* object);
+int mkfs(struct exfat_dev* dev, off64_t volume_size);
+off64_t get_position(const struct fs_object* object);
 
 #endif /* ifndef MKFS_MKEXFAT_H_INCLUDED */
diff --git a/mkfs/rootdir.c b/mkfs/rootdir.c
index a8cc834..c10d409 100644
--- a/mkfs/rootdir.c
+++ b/mkfs/rootdir.c
@@ -26,12 +26,12 @@
 #include "uctc.h"
 #include <string.h>
 
-static off_t rootdir_alignment(void)
+static off64_t rootdir_alignment(void)
 {
 	return get_cluster_size();
 }
 
-static off_t rootdir_size(void)
+static off64_t rootdir_size(void)
 {
 	return get_cluster_size();
 }
diff --git a/mkfs/uct.c b/mkfs/uct.c
index a70e897..1056850 100644
--- a/mkfs/uct.c
+++ b/mkfs/uct.c
@@ -23,12 +23,12 @@
 #include "uct.h"
 #include "uctc.h"
 
-static off_t uct_alignment(void)
+static off64_t uct_alignment(void)
 {
 	return get_cluster_size();
 }
 
-static off_t uct_size(void)
+static off64_t uct_size(void)
 {
 	return sizeof(upcase_table);
 }
diff --git a/mkfs/vbr.c b/mkfs/vbr.c
index 81ab2ba..04923cf 100644
--- a/mkfs/vbr.c
+++ b/mkfs/vbr.c
@@ -27,12 +27,12 @@
 #include "rootdir.h"
 #include <string.h>
 
-static off_t vbr_alignment(void)
+static off64_t vbr_alignment(void)
 {
 	return get_sector_size();
 }
 
-static off_t vbr_size(void)
+static off64_t vbr_size(void)
 {
 	return 12 * get_sector_size();
 }
@@ -43,7 +43,7 @@ static void init_sb(struct exfat_super_block* sb)
 	uint32_t fat_sectors;
 
 	clusters_max = get_volume_size() / get_cluster_size();
-	fat_sectors = DIV_ROUND_UP((off_t) clusters_max * sizeof(cluster_t),
+	fat_sectors = DIV_ROUND_UP((off64_t) clusters_max * sizeof(cluster_t),
 			get_sector_size());
 
 	memset(sb, 0, sizeof(struct exfat_super_block));
-- 
2.11.0

